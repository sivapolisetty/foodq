import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../../../shared/models/app_user.dart';
import '../providers/user_provider.dart';
import 'user_selection_modal.dart';

/// Widget that displays profile menu options based on user type
/// Shows different menu items for business vs customer users
class ProfileMenuSection extends ConsumerWidget {
  final AppUser user;

  const ProfileMenuSection({
    Key? key,
    required this.user,
  }) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Column(
      children: [
        // User management section
        _buildMenuSection(
          title: 'User Management',
          items: [
            _buildMenuItem(
              icon: Icons.people_alt,
              title: 'Switch User',
              subtitle: 'Change to a different user account',
              onTap: () => _showUserSelectionModal(context),
              color: const Color(0xFF4CAF50),
            ),
            _buildMenuItem(
              icon: Icons.person_add,
              title: 'Create New User',
              subtitle: 'Add a new business or customer user',
              onTap: () => _showCreateUserDialog(context, ref),
              color: const Color(0xFF2196F3),
            ),
          ],
        ),
        
        const SizedBox(height: 24),
        
        // Business-specific menu (only for business users)
        if (user.isBusiness) ...[
          _buildMenuSection(
            title: 'Business Features',
            items: [
              _buildMenuItem(
                icon: Icons.dashboard,
                title: 'Business Dashboard',
                subtitle: 'View your business performance',
                onTap: () => context.go('/business-home'),
                color: const Color(0xFF4CAF50),
              ),
              _buildMenuItem(
                icon: Icons.restaurant_menu,
                title: 'Manage Deals',
                subtitle: 'Create and edit your deals',
                onTap: () => context.go('/deals'),
                color: const Color(0xFFFF6B35),
              ),
              _buildMenuItem(
                icon: Icons.attach_money,
                title: 'Finances',
                subtitle: 'Track earnings and payments',
                onTap: () => context.go('/finances'),
                color: const Color(0xFF4CAF50),
              ),
              _buildMenuItem(
                icon: Icons.shopping_bag,
                title: 'Business Orders',
                subtitle: 'Manage incoming orders',
                onTap: () => context.go('/orders'),
                color: const Color(0xFF9C27B0),
              ),
            ],
          ),
          const SizedBox(height: 24),
        ],
        
        // Customer-specific menu (only for customer users)
        if (user.isCustomer) ...[
          _buildMenuSection(
            title: 'Customer Features',
            items: [
              _buildMenuItem(
                icon: Icons.explore,
                title: 'Explore Deals',
                subtitle: 'Discover new deals near you',
                onTap: () => context.go('/home'),
                color: const Color(0xFF4CAF50),
              ),
              _buildMenuItem(
                icon: Icons.search,
                title: 'Search',
                subtitle: 'Find specific restaurants or meals',
                onTap: () => context.go('/search'),
                color: const Color(0xFF2196F3),
              ),
              _buildMenuItem(
                icon: Icons.favorite,
                title: 'Favorites',
                subtitle: 'Your saved deals and restaurants',
                onTap: () => context.go('/favorites'),
                color: const Color(0xFFE91E63),
              ),
              _buildMenuItem(
                icon: Icons.shopping_cart,
                title: 'My Orders',
                subtitle: 'View your order history',
                onTap: () => context.go('/orders'),
                color: const Color(0xFF9C27B0),
              ),
            ],
          ),
          const SizedBox(height: 24),
        ],
        
        // Common menu items for all users
        _buildMenuSection(
          title: 'Account & Settings',
          items: [
            _buildMenuItem(
              icon: Icons.edit,
              title: 'Edit Profile',
              subtitle: 'Update your profile information',
              onTap: () => _showEditProfileDialog(context, ref),
              color: const Color(0xFF757575),
            ),
            _buildMenuItem(
              icon: Icons.notifications,
              title: 'Notifications',
              subtitle: 'Manage notification preferences',
              onTap: () => context.go('/notifications'),
              color: const Color(0xFFFF9800),
            ),
            _buildMenuItem(
              icon: Icons.help,
              title: 'Help & Support',
              subtitle: 'Get help and contact support',
              onTap: () => _showHelpDialog(context),
              color: const Color(0xFF607D8B),
            ),
            _buildMenuItem(
              icon: Icons.info,
              title: 'About KraveKart',
              subtitle: 'App version and information',
              onTap: () => _showAboutDialog(context),
              color: const Color(0xFF795548),
            ),
          ],
        ),
        
        const SizedBox(height: 24),
        
        // Danger zone (logout and delete)
        _buildMenuSection(
          title: 'Account Actions',
          items: [
            _buildMenuItem(
              icon: Icons.logout,
              title: 'Switch to Guest Mode',
              subtitle: 'Log out from current user',
              onTap: () => _handleLogout(context, ref),
              color: const Color(0xFFFF9800),
            ),
            _buildMenuItem(
              icon: Icons.delete_forever,
              title: 'Delete User',
              subtitle: 'Permanently delete this user account',
              onTap: () => _handleDeleteUser(context, ref),
              color: const Color(0xFFE53935),
              isDangerous: true,
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMenuSection({
    required String title,
    required List<Widget> items,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.06),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
          BoxShadow(
            color: Colors.black.withOpacity(0.02),
            blurRadius: 1,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(24),
            child: Text(
              title,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.w700,
                color: Color(0xFF212121),
                letterSpacing: -0.5,
              ),
            ),
          ),
          ...items,
        ],
      ),
    );
  }

  Widget _buildMenuItem({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
    required Color color,
    bool isDangerous = false,
  }) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(0),
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 18),
          decoration: const BoxDecoration(
            border: Border(
              top: BorderSide(
                color: Color(0xFFF0F0F0),
                width: 1,
              ),
            ),
          ),
          child: Row(
            children: [
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: color.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: Icon(
                  icon,
                  color: color,
                  size: 24,
                ),
              ),
              const SizedBox(width: 20),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: TextStyle(
                        fontSize: 17,
                        fontWeight: FontWeight.w600,
                        color: isDangerous 
                            ? const Color(0xFFE53935)
                            : const Color(0xFF212121),
                        letterSpacing: -0.3,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      subtitle,
                      style: const TextStyle(
                        fontSize: 15,
                        color: Color(0xFF757575),
                        fontWeight: FontWeight.w400,
                      ),
                    ),
                  ],
                ),
              ),
              Icon(
                Icons.arrow_forward_ios,
                size: 18,
                color: const Color(0xFFBDBDBD),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showUserSelectionModal(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => const UserSelectionModal(),
    );
  }

  void _showCreateUserDialog(BuildContext context, WidgetRef ref) {
    context.go('/create-user');
  }

  void _showEditProfileDialog(BuildContext context, WidgetRef ref) {
    // TODO: Implement edit profile dialog
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Edit profile feature coming soon!'),
        backgroundColor: Color(0xFF2196F3),
      ),
    );
  }

  void _showHelpDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Help & Support'),
        content: const Text(
          'For support, please contact:\n\n'
          'Email: support@kravekart.com\n'
          'Phone: +1-555-KRAVE-00\n\n'
          'Our support team is available 24/7 to help you.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  void _showAboutDialog(BuildContext context) {
    showAboutDialog(
      context: context,
      applicationName: 'KraveKart',
      applicationVersion: '1.0.0 (MVP)',
      applicationIcon: Container(
        width: 64,
        height: 64,
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Color(0xFF4CAF50), Color(0xFF2E7D32)],
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: const Icon(
          Icons.restaurant_menu,
          color: Colors.white,
          size: 32,
        ),
      ),
      children: [
        const Text(
          'KraveKart helps you discover amazing food deals from local restaurants. '
          'Built with Flutter and powered by Supabase.',
        ),
      ],
    );
  }

  void _handleLogout(BuildContext context, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Switch to Guest Mode'),
        content: const Text(
          'Are you sure you want to log out? You can switch back to any user later.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.of(context).pop();
              await ref.read(currentUserProvider.notifier).logout();
              
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Switched to guest mode'),
                    backgroundColor: Color(0xFF4CAF50),
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFFF9800),
              foregroundColor: Colors.white,
            ),
            child: const Text('Logout'),
          ),
        ],
      ),
    );
  }

  void _handleDeleteUser(BuildContext context, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text(
          'Delete User Account',
          style: TextStyle(color: Color(0xFFE53935)),
        ),
        content: Text(
          'Are you sure you want to permanently delete the account for "${user.name}"?\n\n'
          'This action cannot be undone.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.of(context).pop();
              
              try {
                // TODO: Implement actual user deletion via API
                await ref.read(currentUserProvider.notifier).logout();
                
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('User account deleted'),
                      backgroundColor: Color(0xFFE53935),
                    ),
                  );
                }
              } catch (e) {
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Failed to delete user: $e'),
                      backgroundColor: const Color(0xFFE53935),
                    ),
                  );
                }
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFFE53935),
              foregroundColor: Colors.white,
            ),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }
}