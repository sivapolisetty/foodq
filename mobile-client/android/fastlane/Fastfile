# Fastfile for NoenCircles Android Deployment Pattern
# GraBeat - Firebase App Distribution

default_platform(:android)

platform :android do
  desc "Build and distribute to Firebase App Distribution"
  lane :beta do
    # Ensure we're in the right directory
    Dir.chdir('../..')
    
    # Clean and get dependencies
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    
    # Get version info
    version_name = sh("grep", "version:", "pubspec.yaml").split(":")[1].strip.split("+")[0]
    version_code = sh("grep", "version:", "pubspec.yaml").split("+")[1].strip
    
    # Increment version code
    new_version_code = (version_code.to_i + 1).to_s
    sh("sed", "-i", "", "s/version: #{version_name}+#{version_code}/version: #{version_name}+#{new_version_code}/", "pubspec.yaml")
    
    # Build release APK
    sh("flutter", "build", "apk", "--release", "--build-number=#{new_version_code}")
    
    # Upload to Firebase App Distribution
    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID_ANDROID"],
      apk_path: "./build/app/outputs/flutter-apk/app-release.apk",
      groups: "beta-testers",
      release_notes: "GraBeat Beta Build #{new_version_code} - #{Time.now.strftime('%Y-%m-%d %H:%M')}"
    )
    
    # Send notification (optional - configure with your preferred service)
    # slack(
    #   message: "GraBeat Android Beta #{new_version_code} distributed via Firebase! ðŸš€",
    #   channel: "#deployments"
    # )
  end

  desc "Build and distribute AAB to internal testing"
  lane :internal do
    # Ensure we're in the right directory
    Dir.chdir('../..')
    
    # Clean and get dependencies
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    
    # Get version info
    version_name = sh("grep", "version:", "pubspec.yaml").split(":")[1].strip.split("+")[0]
    version_code = sh("grep", "version:", "pubspec.yaml").split("+")[1].strip
    
    # Increment version code
    new_version_code = (version_code.to_i + 1).to_s
    sh("sed", "-i", "", "s/version: #{version_name}+#{version_code}/version: #{version_name}+#{new_version_code}/", "pubspec.yaml")
    
    # Build release AAB for Play Store
    sh("flutter", "build", "appbundle", "--release", "--build-number=#{new_version_code}")
    
    # Upload to Play Console Internal Testing
    upload_to_play_store(
      track: 'internal',
      aab: './build/app/outputs/bundle/release/app-release.aab',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Setup Firebase CLI for CI/CD"
  lane :setup_firebase do
    # Login to Firebase (for CI)
    if is_ci?
      sh("firebase", "login", "--token", ENV["FIREBASE_TOKEN"])
    else
      sh("firebase", "login")
    end
    
    # Set Firebase project
    sh("firebase", "use", ENV["FIREBASE_PROJECT_ID"]) if ENV["FIREBASE_PROJECT_ID"]
  end

  desc "Build Android app locally for testing"
  lane :build_local do
    Dir.chdir('../..')
    
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    sh("flutter", "build", "apk", "--debug")
    
    # Output APK location
    puts "APK built successfully!"
    puts "Location: ./build/app/outputs/flutter-apk/app-debug.apk"
  end

  desc "Run tests"
  lane :test do
    Dir.chdir('../..')
    
    sh("flutter", "test")
    sh("flutter", "test", "integration_test/")
  end

  error do |lane, exception|
    puts "Error in lane #{lane}: #{exception.message}"
    # Add error notification here if needed
  end
end