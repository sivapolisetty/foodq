# Fastfile for NoenCircles iOS Deployment Pattern
# FoodQ - iOS TestFlight Distribution

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    # First increment build number
    increment_build_number
    
    # Get build number for Flutter
    build_number = get_build_number
    
    # Navigate to Flutter root and build
    sh("cd .. && flutter build ios --release --build-number=#{build_number}")
    
    # Build and upload to TestFlight
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store"
    )
    
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false
    )
    
    # Send notification (optional - configure with your preferred service)
    # slack(
    #   message: "GraBeat iOS Beta #{build_number} uploaded to TestFlight! ðŸš€",
    #   channel: "#deployments"
    # )
  end

  desc "Setup code signing for CI/CD"
  lane :ios_setup_ci do
    setup_ci(provider: "travis") if is_ci?
    
    # Use App Store Connect API Key for authentication
    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"]
    )
  end

  desc "Build iOS app locally for testing"
  lane :build_local do
    Dir.chdir('../..')
    
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    sh("flutter", "build", "ios", "--debug")
    
    build_app(
      workspace: "ios/Runner.xcworkspace",
      scheme: "Runner",
      export_method: "development",
      output_directory: "./build/ios/ipa/"
    )
  end

  desc "Run tests"
  lane :test do
    Dir.chdir('../..')
    
    sh("flutter", "test")
    sh("flutter", "test", "integration_test/")
  end

  error do |lane, exception|
    puts "Error in lane #{lane}: #{exception.message}"
    # Add error notification here if needed
  end
end