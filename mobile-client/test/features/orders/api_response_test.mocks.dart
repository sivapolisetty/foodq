// Mocks generated by Mockito 5.4.6 from annotations
// in foodq/test/features/orders/api_response_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:foodq/features/orders/services/order_service.dart' as _i3;
import 'package:foodq/shared/models/order.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrder_0 extends _i1.SmartFake implements _i2.Order {
  _FakeOrder_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderService extends _i1.Mock implements _i3.OrderService {
  @override
  _i4.Future<_i2.Order> createOrder(Map<String, dynamic>? orderData) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [orderData],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #createOrder,
            [orderData],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #createOrder,
            [orderData],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<List<_i2.Order>> getCustomerOrders(String? customerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomerOrders,
          [customerId],
        ),
        returnValue: _i4.Future<List<_i2.Order>>.value(<_i2.Order>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Order>>.value(<_i2.Order>[]),
      ) as _i4.Future<List<_i2.Order>>);

  @override
  _i4.Future<List<_i2.Order>> getBusinessOrders(String? businessId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBusinessOrders,
          [businessId],
        ),
        returnValue: _i4.Future<List<_i2.Order>>.value(<_i2.Order>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Order>>.value(<_i2.Order>[]),
      ) as _i4.Future<List<_i2.Order>>);

  @override
  _i4.Future<_i2.Order?> getOrderById(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #getOrderById,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Order?>.value(),
      ) as _i4.Future<_i2.Order?>);

  @override
  _i4.Future<_i2.Order> updateOrderStatus(
    String? orderId,
    _i2.OrderStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrderStatus,
          [
            orderId,
            status,
          ],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #updateOrderStatus,
            [
              orderId,
              status,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #updateOrderStatus,
            [
              orderId,
              status,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i2.Order> cancelOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #cancelOrder,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #cancelOrder,
            [orderId],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #cancelOrder,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i2.Order> confirmOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #confirmOrder,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #confirmOrder,
            [orderId],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #confirmOrder,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i2.Order> markOrderReady(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #markOrderReady,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #markOrderReady,
            [orderId],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #markOrderReady,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i2.Order> completeOrder(String? orderId) => (super.noSuchMethod(
        Invocation.method(
          #completeOrder,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #completeOrder,
            [orderId],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #completeOrder,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i2.Order> updatePickupTime(
    String? orderId,
    DateTime? pickupTime,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePickupTime,
          [
            orderId,
            pickupTime,
          ],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #updatePickupTime,
            [
              orderId,
              pickupTime,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #updatePickupTime,
            [
              orderId,
              pickupTime,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<_i2.Order> updatePaymentStatus(
    String? orderId,
    _i2.PaymentStatus? paymentStatus,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePaymentStatus,
          [
            orderId,
            paymentStatus,
          ],
        ),
        returnValue: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #updatePaymentStatus,
            [
              orderId,
              paymentStatus,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Order>.value(_FakeOrder_0(
          this,
          Invocation.method(
            #updatePaymentStatus,
            [
              orderId,
              paymentStatus,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Order>);

  @override
  _i4.Future<List<_i2.OrderWithDetails>> getOrdersWithDetails(
          String? customerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrdersWithDetails,
          [customerId],
        ),
        returnValue: _i4.Future<List<_i2.OrderWithDetails>>.value(
            <_i2.OrderWithDetails>[]),
        returnValueForMissingStub: _i4.Future<List<_i2.OrderWithDetails>>.value(
            <_i2.OrderWithDetails>[]),
      ) as _i4.Future<List<_i2.OrderWithDetails>>);

  @override
  DateTime calculateEstimatedPickupTime({int? prepTimeMinutes = 15}) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateEstimatedPickupTime,
          [],
          {#prepTimeMinutes: prepTimeMinutes},
        ),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.method(
            #calculateEstimatedPickupTime,
            [],
            {#prepTimeMinutes: prepTimeMinutes},
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.method(
            #calculateEstimatedPickupTime,
            [],
            {#prepTimeMinutes: prepTimeMinutes},
          ),
        ),
      ) as DateTime);

  @override
  Map<String, String> validateOrderData({
    required String? customerId,
    required String? dealId,
    required String? businessId,
    required int? quantity,
    required double? unitPrice,
    DateTime? pickupTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateOrderData,
          [],
          {
            #customerId: customerId,
            #dealId: dealId,
            #businessId: businessId,
            #quantity: quantity,
            #unitPrice: unitPrice,
            #pickupTime: pickupTime,
          },
        ),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
}
